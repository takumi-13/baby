#%%
import cv2
import numpy as np



# %%
m_real = [(0,0),(0,30),(0,60),
              (30,0),(30,30),(30,60),
              (60,0),(60,30),(60,60)]

# %%
marker_list = [((458, 670), (467, 673)), ((467, 646), (477, 648)), ((478, 624), (486, 626)),
                   ((540, 665), (551, 667)), ((543, 641), (552, 643)), ((548, 621), (556, 623)),
                   ((622, 661), (633, 663)), ((619, 638), (626, 640)), ((616, 615), (624, 620))]
# %%
def cal_ave (l):
    res = []
    for item in l:
        x = (item[0][0] + item[1][0]) / 2
        y = (item[0][1] + item[1][1]) / 2
        res.append((x, y))
    return res

# %%
ave_mark = cal_ave(marker_list)

# %%
delta = []
for x,y in ave_mark:
    delta.append(x + y)
    
# %%
result_x = []
result_z = []
result_alpha = []
result_beta = []
for i in range(9):
    x = delta[i] * m_real[i][0]
    y = delta[i] * m_real[i][1]
    result_alpha.append(x)
    result_beta.append(y)
    result_x.append(m_real[i][0])
    result_z.append(m_real[i][1])


# %%
minus_ones = [-1,-1,-1,-1,-1,-1,-1,-1]
print (result_alpha)
print (result_beta)
print (result_x)
print (result_z)
print (minus_ones)
print (result_x)
print (result_z)
print (minus_ones)

print ("x")
cs = ["C1","C2","C3","C4","C5","C6","C7","C8","C9"]
print (cs)
print ("+")
print (delta) 
print ("=")
print (0)
# %%
import numpy as np
import numpy.linalg as LA
A = np.array([[0.0, 0.0, 0.0, 36345.0, 35685.0, 35220.0, 77370.0, 75690.0],
              [0.0, 33570.0, 66420.0, 0.0, 35685.0, 70440.0, 0.0, 37845.0],
              [0.0, 0.0, 0.0, 30.0, 30.0, 30.0, 60.0, 60.0],
              [0.0, 30, 60, 0, 30, 60, 0, 30],
              [-1.0, -1, -1, -1, -1, -1, -1,-1],
              [0.0, 0, 0, 30, 30, 30, 60, 60],
              [0.0, 30, 60, 0, 30, 60, 0, 30],
              [-1.0, -1, -1, -1, -1, -1, -1,-1]])

b = np.array([[-1134.0],[-1119.0], [-1107.0], [-1211.5], [-1189.5],
 [-1174.0], [-1289.5], [-1261.5]])
det = LA.det(A)
A_inv = LA.pinv(A)
C = A_inv@b
print (C)
# %%
import numpy as np

A = np.array([[6, 4, 1],
              [1, 8, -2],
              [3, 2, 0]])
b = np.array([7, 6, 8])

x = np.linalg.solve(A, b)

print(x)

# %%



# %%
img = cv2.imread('images/marker_Moment.jpg')
marker = Marker(img)
# %%
l = marker.cal_ave()
# %%
print (l)

# %%
a = [1,2,3]
for item in a:
    item = item * -1
print (a) 

# %%
res = [0.9922233827073677, 0.9983688286819262, 1.0231912913493066, 1.031409405892017, 1.031409405892017, 1.0086342659710237, 1.0168674102370348, 0.9658827985568682, 0.9355687619553095, 0.9439302603441563, 0.9607113084765457, 0.9691309924586421, 0.9469311537392083, 0.9554213575444443, 0.9554213575444443, 0.9639314576364529, 0.9724615239121853, 1.004882337942129, 1.0220506990210054, 1.0306651456304048, 1.0392998644503015, 1.050142297230744, 1.094018843934254, 1.0787988235670518, 1.0876547446887361, 1.120596842159822, 1.140655931143634, 1.1592739400835106, 1.1561188268022549, 1.1744510725299726, 1.1988410318209721, 1.2172692194115018, 1.1891611072492954, 1.2111554764169388, 1.2205629643819156, 1.2205629643819156, 1.2145848024457868, 1.2335602140407702, 1.208540162911007, 1.2180610321873921, 1.2024279309353758, 1.2215851342988149, 1.2058593261880304, 1.2058593261880304, 1.2445562629708935, 1.279647592470012, 1.2483242378016823, 1.291029700681801, 1.285242358274716, 1.2976286856463868, 1.3075668774305362, 1.317531072498249, 1.3430649703631614, 1.3430649703631614, 1.3375378816281753, 1.331946692254617, 1.3103974899436681, 1.3466077236838223, 1.377287443601052, 1.3978775659392233, 1.4133341448838572, 1.3975537129730753, 1.4080273399893206, 1.392127583436471, 1.392127583436471, 1.392127583436471, 1.4026567548022153, 1.392127583436471, 1.394757179864285, 1.413214756807683, 1.4052935478113275, 1.389279532581868, 1.378716026281794, 1.378716026281794, 1.3704649337109525, 1.3704649337109525, 1.3625246552250279, 1.3704649337109525, 1.359881543296955, 1.376079677839867, 1.365552340792443, 1.3493272832332643, 1.3493272832332643, 1.3493272832332643, 1.3493272832332643, 1.3550538055955068, 1.3445839542398164, 1.3550538055955068, 1.3550538055955068, 1.3550538055955068, 1.365552340792443, 1.359881543296955, 1.3190671342906435, 1.3250330991566306, 1.2917721103386373, 1.261646147750766, 1.2873966049607453, 1.2706346015407832, 1.257483255416031, 1.280479613055826, 1.280479613055826, 1.211934411177116, 1.184670975079524, 1.184670975079524, 1.2090741760422132, 1.2064647367281842, 1.18142917006428, 1.1399096549417729, 1.1296015957914078, 1.1296015957914078, 1.0608615931938334, 1.0506995276579028, 1.0304592383928335, 1.0080938222011404, 0.9604865799393152, 0.9382778552477042, 0.9210979983596304, 0.9210979983596304, 0.8931989490181927, 0.8809849750416937, 0.8918355508171412, 0.8797126580942487, 0.8724584964481761, 0.8628090252513473, 0.8445903624486921, 0.8421771513988159, 0.8445903624486921, 0.8421771513988159, 0.8325405675497435, 0.8229299215470754, 0.7853180094730275, 0.7757658109991311, 0.7472629435539108, 0.7096139951908029, 0.70026445407, 0.7189885143362468, 0.6909397914203106, 0.6816399082235681, 0.6909397914203106, 0.6631140867741664, 0.6631140867741664, 0.6538879531338349, 0.6355087554802846, 0.5990399578757598, 0.6081211949963716, 0.5619370282771696, 0.5439101180885367, 0.5539891840579261, 0.5081386630789008, 0.5361330122836866, 0.4992540907555516, 0.5183695419620445, 0.5095223455100476, 0.5183695419620445, 0.5095223455100476, 0.5272397344306161, 0.5272397344306161, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5361330122836866, 0.5081386630789008, 0.5081386630789008, 0.4639462585023178, 0.47436174953060195, 0.47436174953060195, 0.46562820965116647, 0.4551764694547962, 0.44642937164772023, 0.4377048777640307, 0.4395620666193589, 0.4222958480846295, 0.4051178099851971, 0.3772591002910689, 0.28974572375156055, 0.3321767482987143, 0.2983333028410365, 0.27078978089999445, 0.246200468436459, 0.2185283040601772, 0.20562557675226326, 0.1975710871363277, 0.19556059452174837, 0.20562557675226326, 0.17800550212222382, 0.1699616372518968, 0.16795381365174383, 0.12227230806958325, 0.0781623350904576, 0.06225158234252941, 0.030714661517599218, 0.013275838310308907, 0.047388093405385495, 0.057518067329559115, 0.0038271479999307696, 0.036596116367682244, 0.08481480134273103, 0.05180137435984979, 0.07962443730715842, 0.11734433787973858, 0.10983591226926914, 0.13028897634121606, 0.10230965619143875, 0.10453920158401599, 0.06446757278746805, 0.07934284960354221, 0.07433717176766584, 0.1307395544876074, 0.15642888893936105, 0.17840548265039813, 0.14727727049360356, 0.1365671212857836, 0.16349098410891122, 0.2178040723506426, 0.21909760172824747, 0.24736139087063655, 0.2203720851516319, 0.24736139087063655, 0.21909760172824747, 0.2604268929932629, 0.2665440437496731, 0.24031999300637488, 0.25263175351202743, 0.29302195014311744, 0.28774492250602474, 0.25964469846802424, 0.3222390266466494, 0.3498543865983131, 0.26838812445145477, 0.2425304093149265, 0.27621434320795446, 0.2831228644683834, 0.2831228644683834, 0.2563860946240883, 0.27017880860992555, 0.2632902979370155, 0.24361165353709938, 0.24361165353709938, 0.27017880860992555, 0.27017880860992555, 0.25049573954782656, 0.25049573954782656, 0.25049573954782656, 0.27017880860992555, 0.25736426753286734, 0.25736426753286734, 0.25049573954782656, 0.25049573954782656, 0.25049573954782656, 0.23782880939387852, 0.24467737877726065, 0.25151057290401, 0.2975769337044468, 0.2778769910068261, 0.2975769337044468, 0.2975769337044468, 0.2907506890329894, 0.2975769337044468, 0.2907506890329894, 0.2710548442971383, 0.25049573954782656, 0.2907506890329894, 0.2839089536557247, 0.2907506890329894, 0.24361165353709938, 0.24946614843094247, 0.22286556557443993, 0.2297966143177959, 0.21591876795099288, 0.21591876795099288, 0.2141796023480924, 0.21591876795099288, 0.20023065353490585, 0.18248129116873993, 0.19498342433561686, 0.168487589036519, 0.1614670100039993, 0.1437959407361444, 0.1509068942797878, 0.12216169059771825, 0.10587720527832345, 0.10043068812039083, 0.09861315467294712, 0.08403673495615377, 0.08403673495615377, 0.08403673495615377, 0.06939756535834071, 0.06939756535834071, 0.062055635349435964, 0.06939756535834071, 0.0499159452251214, 0.0499159452251214, 0.016240266235432455, 0.018861350864969463, 0.062004546586470755, 0.08995164892978215, 0.10852849616429168, 0.08810290892067034, 0.08256387808741776, 0.06384832544689002, 0.057945187644994865, 0.05979904544630474, 0.08607570064988751, 0.1047838769771771, 0.1047838769771771, 0.14920569896924019, 0.1641208241633177, 0.1641208241633177, 0.1641208241633177, 0.19735137197590374, 0.21239147895129276, 0.23508379327785728, 0.2426833224839745, 0.25030064626564297, 0.25793581650023956, 0.25793581650023956, 0.2655888864457364, 0.2655888864457364, 0.2655888864457364, 0.2809489445546839, 0.31436866655063594, 0.40032216421712763, 0.4195244463386285, 0.42724843548264874, 0.42724843548264874, 0.4443755573382063, 0.44244549838735864, 0.44244549838735864, 0.44244549838735864, 0.4270447191643964, 0.4117141716123532, 0.3983571888851714, 0.3812619186292319, 0.3812619186292319, 0.3812619186292319, 0.3812619186292319, 0.4321063636787055, 0.4893310433636264, 0.4893310433636264, 0.521823855878993, 0.5207226754017931, 0.5596078135314215, 0.5596078135314215, 0.575619930730252, 0.5990979667233309, 0.5832161680115051, 0.5832161680115051, 0.590829204167382, 0.590829204167382, 0.590829204167382, 0.6067000338552743, 0.5990979667233309, 0.6460396621784127, 0.6919527796463328, 0.688217191765927]

# %%
len (res)

# %%
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

# 折れ線グラフを出力
height = np.array(res)
left = np.array(range(359))
plt.plot(left, height)

plt.savefig('figure.png') # -----(2)
# %%
np.array(range(359))


# %%
